/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Control_H
#define Control_H

#include <thrift/TDispatchProcessor.h>
#include "interface_types.h"

namespace C {

class ControlIf {
 public:
  virtual ~ControlIf() {}
  virtual int32_t ping() = 0;
  virtual void tSet(std::string& _return, const int32_t json) = 0;
  virtual void tSetOpt(std::string& _return, const std::string& json, const std::string& opt) = 0;
  virtual void tGet(std::string& _return, const std::string& json) = 0;
  virtual void tGetOpt(std::string& _return, const std::string& json, const std::string& opt) = 0;
  virtual void tTune(std::string& _return, const std::string& json) = 0;
  virtual void tTuneOpt(std::string& _return, const std::string& json, const std::string& opt) = 0;
};

class ControlIfFactory {
 public:
  typedef ControlIf Handler;

  virtual ~ControlIfFactory() {}

  virtual ControlIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ControlIf* /* handler */) = 0;
};

class ControlIfSingletonFactory : virtual public ControlIfFactory {
 public:
  ControlIfSingletonFactory(const boost::shared_ptr<ControlIf>& iface) : iface_(iface) {}
  virtual ~ControlIfSingletonFactory() {}

  virtual ControlIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ControlIf* /* handler */) {}

 protected:
  boost::shared_ptr<ControlIf> iface_;
};

class ControlNull : virtual public ControlIf {
 public:
  virtual ~ControlNull() {}
  int32_t ping() {
    int32_t _return = 0;
    return _return;
  }
  void tSet(std::string& /* _return */, const int32_t /* json */) {
    return;
  }
  void tSetOpt(std::string& /* _return */, const std::string& /* json */, const std::string& /* opt */) {
    return;
  }
  void tGet(std::string& /* _return */, const std::string& /* json */) {
    return;
  }
  void tGetOpt(std::string& /* _return */, const std::string& /* json */, const std::string& /* opt */) {
    return;
  }
  void tTune(std::string& /* _return */, const std::string& /* json */) {
    return;
  }
  void tTuneOpt(std::string& /* _return */, const std::string& /* json */, const std::string& /* opt */) {
    return;
  }
};


class Control_ping_args {
 public:

  Control_ping_args() {
  }

  virtual ~Control_ping_args() throw() {}


  bool operator == (const Control_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Control_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Control_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Control_ping_pargs {
 public:


  virtual ~Control_ping_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Control_ping_result__isset {
  _Control_ping_result__isset() : success(false) {}
  bool success;
} _Control_ping_result__isset;

class Control_ping_result {
 public:

  Control_ping_result() : success(0) {
  }

  virtual ~Control_ping_result() throw() {}

  int32_t success;

  _Control_ping_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const Control_ping_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Control_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Control_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Control_ping_presult__isset {
  _Control_ping_presult__isset() : success(false) {}
  bool success;
} _Control_ping_presult__isset;

class Control_ping_presult {
 public:


  virtual ~Control_ping_presult() throw() {}

  int32_t* success;

  _Control_ping_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Control_tSet_args__isset {
  _Control_tSet_args__isset() : json(false) {}
  bool json;
} _Control_tSet_args__isset;

class Control_tSet_args {
 public:

  Control_tSet_args() : json(0) {
  }

  virtual ~Control_tSet_args() throw() {}

  int32_t json;

  _Control_tSet_args__isset __isset;

  void __set_json(const int32_t val) {
    json = val;
  }

  bool operator == (const Control_tSet_args & rhs) const
  {
    if (!(json == rhs.json))
      return false;
    return true;
  }
  bool operator != (const Control_tSet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Control_tSet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Control_tSet_pargs {
 public:


  virtual ~Control_tSet_pargs() throw() {}

  const int32_t* json;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Control_tSet_result__isset {
  _Control_tSet_result__isset() : success(false) {}
  bool success;
} _Control_tSet_result__isset;

class Control_tSet_result {
 public:

  Control_tSet_result() : success() {
  }

  virtual ~Control_tSet_result() throw() {}

  std::string success;

  _Control_tSet_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const Control_tSet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Control_tSet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Control_tSet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Control_tSet_presult__isset {
  _Control_tSet_presult__isset() : success(false) {}
  bool success;
} _Control_tSet_presult__isset;

class Control_tSet_presult {
 public:


  virtual ~Control_tSet_presult() throw() {}

  std::string* success;

  _Control_tSet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Control_tSetOpt_args__isset {
  _Control_tSetOpt_args__isset() : json(false), opt(false) {}
  bool json;
  bool opt;
} _Control_tSetOpt_args__isset;

class Control_tSetOpt_args {
 public:

  Control_tSetOpt_args() : json(), opt() {
  }

  virtual ~Control_tSetOpt_args() throw() {}

  std::string json;
  std::string opt;

  _Control_tSetOpt_args__isset __isset;

  void __set_json(const std::string& val) {
    json = val;
  }

  void __set_opt(const std::string& val) {
    opt = val;
  }

  bool operator == (const Control_tSetOpt_args & rhs) const
  {
    if (!(json == rhs.json))
      return false;
    if (!(opt == rhs.opt))
      return false;
    return true;
  }
  bool operator != (const Control_tSetOpt_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Control_tSetOpt_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Control_tSetOpt_pargs {
 public:


  virtual ~Control_tSetOpt_pargs() throw() {}

  const std::string* json;
  const std::string* opt;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Control_tSetOpt_result__isset {
  _Control_tSetOpt_result__isset() : success(false) {}
  bool success;
} _Control_tSetOpt_result__isset;

class Control_tSetOpt_result {
 public:

  Control_tSetOpt_result() : success() {
  }

  virtual ~Control_tSetOpt_result() throw() {}

  std::string success;

  _Control_tSetOpt_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const Control_tSetOpt_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Control_tSetOpt_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Control_tSetOpt_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Control_tSetOpt_presult__isset {
  _Control_tSetOpt_presult__isset() : success(false) {}
  bool success;
} _Control_tSetOpt_presult__isset;

class Control_tSetOpt_presult {
 public:


  virtual ~Control_tSetOpt_presult() throw() {}

  std::string* success;

  _Control_tSetOpt_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Control_tGet_args__isset {
  _Control_tGet_args__isset() : json(false) {}
  bool json;
} _Control_tGet_args__isset;

class Control_tGet_args {
 public:

  Control_tGet_args() : json() {
  }

  virtual ~Control_tGet_args() throw() {}

  std::string json;

  _Control_tGet_args__isset __isset;

  void __set_json(const std::string& val) {
    json = val;
  }

  bool operator == (const Control_tGet_args & rhs) const
  {
    if (!(json == rhs.json))
      return false;
    return true;
  }
  bool operator != (const Control_tGet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Control_tGet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Control_tGet_pargs {
 public:


  virtual ~Control_tGet_pargs() throw() {}

  const std::string* json;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Control_tGet_result__isset {
  _Control_tGet_result__isset() : success(false) {}
  bool success;
} _Control_tGet_result__isset;

class Control_tGet_result {
 public:

  Control_tGet_result() : success() {
  }

  virtual ~Control_tGet_result() throw() {}

  std::string success;

  _Control_tGet_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const Control_tGet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Control_tGet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Control_tGet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Control_tGet_presult__isset {
  _Control_tGet_presult__isset() : success(false) {}
  bool success;
} _Control_tGet_presult__isset;

class Control_tGet_presult {
 public:


  virtual ~Control_tGet_presult() throw() {}

  std::string* success;

  _Control_tGet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Control_tGetOpt_args__isset {
  _Control_tGetOpt_args__isset() : json(false), opt(false) {}
  bool json;
  bool opt;
} _Control_tGetOpt_args__isset;

class Control_tGetOpt_args {
 public:

  Control_tGetOpt_args() : json(), opt() {
  }

  virtual ~Control_tGetOpt_args() throw() {}

  std::string json;
  std::string opt;

  _Control_tGetOpt_args__isset __isset;

  void __set_json(const std::string& val) {
    json = val;
  }

  void __set_opt(const std::string& val) {
    opt = val;
  }

  bool operator == (const Control_tGetOpt_args & rhs) const
  {
    if (!(json == rhs.json))
      return false;
    if (!(opt == rhs.opt))
      return false;
    return true;
  }
  bool operator != (const Control_tGetOpt_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Control_tGetOpt_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Control_tGetOpt_pargs {
 public:


  virtual ~Control_tGetOpt_pargs() throw() {}

  const std::string* json;
  const std::string* opt;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Control_tGetOpt_result__isset {
  _Control_tGetOpt_result__isset() : success(false) {}
  bool success;
} _Control_tGetOpt_result__isset;

class Control_tGetOpt_result {
 public:

  Control_tGetOpt_result() : success() {
  }

  virtual ~Control_tGetOpt_result() throw() {}

  std::string success;

  _Control_tGetOpt_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const Control_tGetOpt_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Control_tGetOpt_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Control_tGetOpt_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Control_tGetOpt_presult__isset {
  _Control_tGetOpt_presult__isset() : success(false) {}
  bool success;
} _Control_tGetOpt_presult__isset;

class Control_tGetOpt_presult {
 public:


  virtual ~Control_tGetOpt_presult() throw() {}

  std::string* success;

  _Control_tGetOpt_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Control_tTune_args__isset {
  _Control_tTune_args__isset() : json(false) {}
  bool json;
} _Control_tTune_args__isset;

class Control_tTune_args {
 public:

  Control_tTune_args() : json() {
  }

  virtual ~Control_tTune_args() throw() {}

  std::string json;

  _Control_tTune_args__isset __isset;

  void __set_json(const std::string& val) {
    json = val;
  }

  bool operator == (const Control_tTune_args & rhs) const
  {
    if (!(json == rhs.json))
      return false;
    return true;
  }
  bool operator != (const Control_tTune_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Control_tTune_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Control_tTune_pargs {
 public:


  virtual ~Control_tTune_pargs() throw() {}

  const std::string* json;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Control_tTune_result__isset {
  _Control_tTune_result__isset() : success(false) {}
  bool success;
} _Control_tTune_result__isset;

class Control_tTune_result {
 public:

  Control_tTune_result() : success() {
  }

  virtual ~Control_tTune_result() throw() {}

  std::string success;

  _Control_tTune_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const Control_tTune_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Control_tTune_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Control_tTune_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Control_tTune_presult__isset {
  _Control_tTune_presult__isset() : success(false) {}
  bool success;
} _Control_tTune_presult__isset;

class Control_tTune_presult {
 public:


  virtual ~Control_tTune_presult() throw() {}

  std::string* success;

  _Control_tTune_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Control_tTuneOpt_args__isset {
  _Control_tTuneOpt_args__isset() : json(false), opt(false) {}
  bool json;
  bool opt;
} _Control_tTuneOpt_args__isset;

class Control_tTuneOpt_args {
 public:

  Control_tTuneOpt_args() : json(), opt() {
  }

  virtual ~Control_tTuneOpt_args() throw() {}

  std::string json;
  std::string opt;

  _Control_tTuneOpt_args__isset __isset;

  void __set_json(const std::string& val) {
    json = val;
  }

  void __set_opt(const std::string& val) {
    opt = val;
  }

  bool operator == (const Control_tTuneOpt_args & rhs) const
  {
    if (!(json == rhs.json))
      return false;
    if (!(opt == rhs.opt))
      return false;
    return true;
  }
  bool operator != (const Control_tTuneOpt_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Control_tTuneOpt_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Control_tTuneOpt_pargs {
 public:


  virtual ~Control_tTuneOpt_pargs() throw() {}

  const std::string* json;
  const std::string* opt;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Control_tTuneOpt_result__isset {
  _Control_tTuneOpt_result__isset() : success(false) {}
  bool success;
} _Control_tTuneOpt_result__isset;

class Control_tTuneOpt_result {
 public:

  Control_tTuneOpt_result() : success() {
  }

  virtual ~Control_tTuneOpt_result() throw() {}

  std::string success;

  _Control_tTuneOpt_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const Control_tTuneOpt_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Control_tTuneOpt_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Control_tTuneOpt_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Control_tTuneOpt_presult__isset {
  _Control_tTuneOpt_presult__isset() : success(false) {}
  bool success;
} _Control_tTuneOpt_presult__isset;

class Control_tTuneOpt_presult {
 public:


  virtual ~Control_tTuneOpt_presult() throw() {}

  std::string* success;

  _Control_tTuneOpt_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ControlClient : virtual public ControlIf {
 public:
  ControlClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  ControlClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t ping();
  void send_ping();
  int32_t recv_ping();
  void tSet(std::string& _return, const int32_t json);
  void send_tSet(const int32_t json);
  void recv_tSet(std::string& _return);
  void tSetOpt(std::string& _return, const std::string& json, const std::string& opt);
  void send_tSetOpt(const std::string& json, const std::string& opt);
  void recv_tSetOpt(std::string& _return);
  void tGet(std::string& _return, const std::string& json);
  void send_tGet(const std::string& json);
  void recv_tGet(std::string& _return);
  void tGetOpt(std::string& _return, const std::string& json, const std::string& opt);
  void send_tGetOpt(const std::string& json, const std::string& opt);
  void recv_tGetOpt(std::string& _return);
  void tTune(std::string& _return, const std::string& json);
  void send_tTune(const std::string& json);
  void recv_tTune(std::string& _return);
  void tTuneOpt(std::string& _return, const std::string& json, const std::string& opt);
  void send_tTuneOpt(const std::string& json, const std::string& opt);
  void recv_tTuneOpt(std::string& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ControlProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ControlIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ControlProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_tSet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_tSetOpt(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_tGet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_tGetOpt(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_tTune(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_tTuneOpt(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ControlProcessor(boost::shared_ptr<ControlIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &ControlProcessor::process_ping;
    processMap_["tSet"] = &ControlProcessor::process_tSet;
    processMap_["tSetOpt"] = &ControlProcessor::process_tSetOpt;
    processMap_["tGet"] = &ControlProcessor::process_tGet;
    processMap_["tGetOpt"] = &ControlProcessor::process_tGetOpt;
    processMap_["tTune"] = &ControlProcessor::process_tTune;
    processMap_["tTuneOpt"] = &ControlProcessor::process_tTuneOpt;
  }

  virtual ~ControlProcessor() {}
};

class ControlProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ControlProcessorFactory(const ::boost::shared_ptr< ControlIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ControlIfFactory > handlerFactory_;
};

class ControlMultiface : virtual public ControlIf {
 public:
  ControlMultiface(std::vector<boost::shared_ptr<ControlIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ControlMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ControlIf> > ifaces_;
  ControlMultiface() {}
  void add(boost::shared_ptr<ControlIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    return ifaces_[i]->ping();
  }

  void tSet(std::string& _return, const int32_t json) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->tSet(_return, json);
    }
    ifaces_[i]->tSet(_return, json);
    return;
  }

  void tSetOpt(std::string& _return, const std::string& json, const std::string& opt) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->tSetOpt(_return, json, opt);
    }
    ifaces_[i]->tSetOpt(_return, json, opt);
    return;
  }

  void tGet(std::string& _return, const std::string& json) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->tGet(_return, json);
    }
    ifaces_[i]->tGet(_return, json);
    return;
  }

  void tGetOpt(std::string& _return, const std::string& json, const std::string& opt) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->tGetOpt(_return, json, opt);
    }
    ifaces_[i]->tGetOpt(_return, json, opt);
    return;
  }

  void tTune(std::string& _return, const std::string& json) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->tTune(_return, json);
    }
    ifaces_[i]->tTune(_return, json);
    return;
  }

  void tTuneOpt(std::string& _return, const std::string& json, const std::string& opt) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->tTuneOpt(_return, json, opt);
    }
    ifaces_[i]->tTuneOpt(_return, json, opt);
    return;
  }

};

} // namespace

#endif
